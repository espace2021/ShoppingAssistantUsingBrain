{"version":3,"sources":["../src/neural-network.js"],"names":["NeuralNetwork","options","validations","iterations","val","errorThresh","log","logPeriod","learningRate","momentum","callback","callbackPeriod","timeout","Object","keys","trainDefaults","forEach","hasOwnProperty","key","Error","Infinity","praxis","beta1","beta2","epsilon","leakyReluAlpha","binaryThresh","hiddenLayers","activation","assign","constructor","defaults","trainOpts","_updateTrainingOptions","sizes","outputLayer","biases","weights","outputs","deltas","changes","errors","errorCheckInterval","prototype","runInput","calculateDeltas","length","layer","size","Array","node","prevSize","setActivation","_runInputSigmoid","_calculateDeltasSigmoid","_runInputRelu","_calculateDeltasRelu","_runInputLeakyRelu","_calculateDeltasLeakyRelu","_runInputTanh","_calculateDeltasTanh","input","isRunnable","inputLookup","lookup","toArray","output","outputLookup","toHash","sum","k","Math","exp","alpha","tanh","data","push","max","floor","_initialize","opts","opt","_validateTrainingOptions","_setLogMethod","reduce","console","i","_trainPattern","status","endTime","error","Date","now","_calculateTrainingError","_trainPatterns","_formatData","_verifyIsInitialized","_prepTraining","_setupAdam","_trainingTick","Promise","resolve","reject","thawedTrain","Thaw","delay","each","stop","done","tick","trainError","target","logErrorRate","_adjustWeights","incoming","delta","change","biasChangesLow","biasChangesHigh","changesLow","changesHigh","_adjustWeightsAdam","gradient","changeLow","changeHigh","momentumCorrection","pow","gradientCorrection","sqrt","biasGradient","biasChangeLow","biasChangeHigh","biasMomentumCorrection","biasGradientCorrection","isArray","tmp","datum","Float32Array","buildLookup","map","value","array","isBinary","falsePos","falseNeg","truePos","trueNeg","misclasses","actual","expected","indexOf","misclass","stats","total","precision","recall","accuracy","layers","nodes","j","bias","index","_getTrainOptsJSON","json","lookupFromHash","needsVar","nodeHandle","layerNumber","nodeKey","result","w","join","toJSON","layersAsMath","Function","checkFns","filter","c"],"mappings":"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","file":"neural-network.js","sourcesContent":["import lookup from './lookup';\nimport max from './utilities/max';\nimport mse from './utilities/mse';\nimport randos from './utilities/randos';\nimport range from './utilities/range';\nimport toArray from './utilities/to-array';\nimport zeros from './utilities/zeros';\nimport Thaw from 'thaw.js';\n\n/**\n * @param {object} options\n * @constructor\n */\nexport default class NeuralNetwork {\n  static get trainDefaults() {\n    return {\n      iterations: 20000,    // the maximum times to iterate the training data\n      errorThresh: 0.005,   // the acceptable error percentage from training data\n      log: false,           // true to use console.log, when a function is supplied it is used\n      logPeriod: 10,        // iterations between logging out\n      learningRate: 0.3,    // multiply's against the input and the delta then adds to momentum\n      momentum: 0.1,        // multiply's against the specified \"change\" then adds to learning rate for change\n      callback: null,       // a periodic call back that can be triggered while training\n      callbackPeriod: 10,   // the number of iterations through the training data between callback calls\n      timeout: Infinity,    // the max number of milliseconds to train for\n      praxis: null,\n      beta1: 0.9,\n      beta2: 0.999,\n      epsilon: 1e-8,\n    };\n  }\n\n  static get defaults() {\n    return {\n      leakyReluAlpha: 0.01,\n      binaryThresh: 0.5,\n      hiddenLayers: [3],     // array of ints for the sizes of the hidden layers in the network\n      activation: 'sigmoid'  // Supported activation types ['sigmoid', 'relu', 'leaky-relu', 'tanh']\n    };\n  }\n\n  /**\n   *\n   * @param options\n   * @private\n   */\n  static _validateTrainingOptions(options) {\n    const validations = {\n      iterations: (val) => { return typeof val === 'number' && val > 0; },\n      errorThresh: (val) => { return typeof val === 'number' && val > 0 && val < 1; },\n      log: (val) => { return typeof val === 'function' || typeof val === 'boolean'; },\n      logPeriod: (val) => { return typeof val === 'number' && val > 0; },\n      learningRate: (val) => { return typeof val === 'number' && val > 0 && val < 1; },\n      momentum: (val) => { return typeof val === 'number' && val > 0 && val < 1; },\n      callback: (val) => { return typeof val === 'function' || val === null },\n      callbackPeriod: (val) => { return typeof val === 'number' && val > 0; },\n      timeout: (val) => { return typeof val === 'number' && val > 0 }\n    };\n    Object.keys(NeuralNetwork.trainDefaults).forEach(key => {\n      if (validations.hasOwnProperty(key) && !validations[key](options[key])) {\n        throw new Error(`[${key}, ${options[key]}] is out of normal training range, your network will probably not train.`);\n      }\n    });\n  }\n\n  constructor(options = {}) {\n    Object.assign(this, this.constructor.defaults, options);\n    this.hiddenLayers = options.hiddenLayers;\n    this.trainOpts = {};\n    this._updateTrainingOptions(Object.assign({}, this.constructor.trainDefaults, options));\n\n    this.sizes = null;\n    this.outputLayer = null;\n    this.biases = null; // weights for bias nodes\n    this.weights = null;\n    this.outputs = null;\n\n    // state for training\n    this.deltas = null;\n    this.changes = null; // for momentum\n    this.errors = null;\n    this.errorCheckInterval = 1;\n    if (!this.constructor.prototype.hasOwnProperty('runInput')) {\n      this.runInput = null;\n    }\n    if (!this.constructor.prototype.hasOwnProperty('calculateDeltas')) {\n      this.calculateDeltas = null;\n    }\n  }\n\n  /**\n   *\n   * Expects this.sizes to have been set\n   */\n  _initialize() {\n    if (!this.sizes) throw new Error ('Sizes must be set before initializing');\n\n    this.outputLayer = this.sizes.length - 1;\n    this.biases = []; // weights for bias nodes\n    this.weights = [];\n    this.outputs = [];\n\n    // state for training\n    this.deltas = [];\n    this.changes = []; // for momentum\n    this.errors = [];\n\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\n      let size = this.sizes[layer];\n      this.deltas[layer] = zeros(size);\n      this.errors[layer] = zeros(size);\n      this.outputs[layer] = zeros(size);\n\n      if (layer > 0) {\n        this.biases[layer] = randos(size);\n        this.weights[layer] = new Array(size);\n        this.changes[layer] = new Array(size);\n\n        for (let node = 0; node < size; node++) {\n          let prevSize = this.sizes[layer - 1];\n          this.weights[layer][node] = randos(prevSize);\n          this.changes[layer][node] = zeros(prevSize);\n        }\n      }\n    }\n\n    this.setActivation();\n  }\n\n  /**\n   *\n   * @param activation supported inputs: 'sigmoid', 'relu', 'leaky-relu', 'tanh'\n   */\n  setActivation(activation) {\n    this.activation = (activation) ? activation : this.activation;\n    switch (this.activation) {\n      case 'sigmoid':\n        this.runInput = this.runInput || this._runInputSigmoid;\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasSigmoid;\n        break;\n      case 'relu':\n        this.runInput = this.runInput || this._runInputRelu;\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasRelu;\n        break;\n      case 'leaky-relu':\n        this.runInput = this.runInput || this._runInputLeakyRelu;\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasLeakyRelu;\n        break;\n      case 'tanh':\n        this.runInput = this.runInput || this._runInputTanh;\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasTanh;\n        break;\n      default:\n        throw new Error('unknown activation ' + this.activation + ', The activation should be one of [\\'sigmoid\\', \\'relu\\', \\'leaky-relu\\', \\'tanh\\']');\n    }\n  }\n\n  /**\n   *\n   * @returns boolean\n   */\n  get isRunnable(){\n    if(!this.runInput){\n      console.error('Activation function has not been initialized, did you run train()?');\n      return false;\n    }\n\n    const checkFns = [\n      'sizes',\n      'outputLayer',\n      'biases',\n      'weights',\n      'outputs',\n      'deltas',\n      'changes',\n      'errors',\n    ].filter(c => this[c] === null);\n\n    if(checkFns.length > 0){\n      console.error(`Some settings have not been initialized correctly, did you run train()? Found issues with: ${checkFns.join(', ')}`);\n      return false;\n    }\n    return true;\n  }\n\n\n  /**\n   *\n   * @param input\n   * @returns {*}\n   */\n  run(input) {\n    if (!this.isRunnable) return null;\n    if (this.inputLookup) {\n      input = lookup.toArray(this.inputLookup, input);\n    }\n\n    let output = [...this.runInput(input)];\n\n    if (this.outputLookup) {\n      output = lookup.toHash(this.outputLookup, output);\n    }\n    return output;\n  }\n\n  /**\n   * trains via sigmoid\n   * @param input\n   * @returns {*}\n   */\n  _runInputSigmoid(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //sigmoid\n        this.outputs[layer][node] = 1 / (1 + Math.exp(-sum));\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  _runInputRelu(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //relu\n        this.outputs[layer][node] = (sum < 0 ? 0 : sum);\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  _runInputLeakyRelu(input) {\n    this.outputs[0] = input;  // set output state of input layer\n    let alpha = this.leakyReluAlpha;\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //leaky relu\n        this.outputs[layer][node] = (sum < 0 ? 0 : alpha * sum);\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  _runInputTanh(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //tanh\n        this.outputs[layer][node] = Math.tanh(sum);\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  /**\n   *\n   * @param data\n   * Verifies network sizes are initilaized\n   * If they are not it will initialize them based off the data set.\n   */\n  _verifyIsInitialized(data) {\n    if (this.sizes) return;\n\n    this.sizes = [];\n    this.sizes.push(data[0].input.length);\n    if (!this.hiddenLayers) {\n      this.sizes.push(Math.max(3, Math.floor(data[0].input.length / 2)));\n    } else {\n      this.hiddenLayers.forEach(size => {\n        this.sizes.push(size);\n      });\n    }\n    this.sizes.push(data[0].output.length);\n\n    this._initialize();\n  }\n\n  /**\n   *\n   * @param opts\n   *    Supports all `trainDefaults` properties\n   *    also supports:\n   *       learningRate: (number),\n   *       momentum: (number),\n   *       activation: 'sigmoid', 'relu', 'leaky-relu', 'tanh'\n   */\n  _updateTrainingOptions(opts) {\n    Object.keys(NeuralNetwork.trainDefaults).forEach(opt => this.trainOpts[opt] = (opts.hasOwnProperty(opt)) ? opts[opt] : this.trainOpts[opt]);\n    NeuralNetwork._validateTrainingOptions(this.trainOpts);\n    this._setLogMethod(opts.log || this.trainOpts.log);\n    this.activation = opts.activation || this.activation;\n  }\n\n  /**\n   *\n   *  Gets JSON of trainOpts object\n   *    NOTE: Activation is stored directly on JSON object and not in the training options\n   */\n  _getTrainOptsJSON() {\n    return Object.keys(NeuralNetwork.trainDefaults)\n      .reduce((opts, opt) => {\n        if (opt === 'timeout' && this.trainOpts[opt] === Infinity) return opts;\n        if (this.trainOpts[opt]) opts[opt] = this.trainOpts[opt];\n        if (opt === 'log') opts.log = typeof opts.log === 'function';\n        return opts;\n      }, {});\n  }\n\n  /**\n   *\n   * @param log\n   * if a method is passed in method is used\n   * if false passed in nothing is logged\n   * @returns error\n   */\n  _setLogMethod(log) {\n    if (typeof log === 'function'){\n      this.trainOpts.log = log;\n    } else if (log) {\n      this.trainOpts.log = console.log;\n    } else {\n      this.trainOpts.log = false;\n    }\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {Number} error\n   */\n  _calculateTrainingError(data) {\n    let sum = 0;\n    for (let i = 0; i < data.length; ++i) {\n      sum += this._trainPattern(data[i].input, data[i].output, true);\n    }\n    return sum / data.length;\n  }\n\n  /**\n   * @param data\n   * @private\n   */\n  _trainPatterns(data) {\n    for (let i = 0; i < data.length; ++i) {\n      this._trainPattern(data[i].input, data[i].output, false);\n    }\n  }\n\n  /**\n   *\n   * @param {object} data\n   * @param {object} status { iterations: number, error: number }\n   * @param endTime\n   */\n  _trainingTick(data, status, endTime) {\n    if (status.iterations >= this.trainOpts.iterations || status.error <= this.trainOpts.errorThresh || Date.now() >= endTime) {\n      return false;\n    }\n\n    status.iterations++;\n\n    if (this.trainOpts.log && (status.iterations % this.trainOpts.logPeriod === 0)) {\n      status.error = this._calculateTrainingError(data);\n      this.trainOpts.log(`iterations: ${status.iterations}, training error: ${status.error}`);\n    } else {\n      if (status.iterations % this.errorCheckInterval === 0) {\n        status.error = this._calculateTrainingError(data);\n      } else {\n        this._trainPatterns(data);\n      }\n    }\n\n    if (this.trainOpts.callback && (status.iterations % this.trainOpts.callbackPeriod === 0)) {\n      this.trainOpts.callback(Object.assign(status));\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @param data\n   * @param options\n   * @protected\n   * @return { data, status, endTime }\n   */\n  _prepTraining(data, options) {\n    this._updateTrainingOptions(options);\n    data = this._formatData(data);\n    const endTime = Date.now() + this.trainOpts.timeout;\n\n    const status = {\n      error: 1,\n      iterations: 0\n    };\n\n    this._verifyIsInitialized(data);\n\n    return {\n      data,\n      status,\n      endTime\n    };\n  }\n\n  /**\n   *\n   * @param data\n   * @param options\n   * @returns {{error: number, iterations: number}}\n   */\n  train(data, options = {}) {\n    let status, endTime;\n    ({ data, status, endTime } = this._prepTraining(data, options));\n\n    if (options.praxis === 'adam') {\n      this._setupAdam();\n    }\n\n    while (this._trainingTick(data, status, endTime));\n    return status;\n  }\n\n  /**\n   *\n   * @param data\n   * @param options\n   * @returns {Promise}\n   * @resolves {{error: number, iterations: number}}\n   * @rejects {{trainError: string, status: {error: number, iterations: number}}\n   */\n  trainAsync(data, options = {}) {\n    let status, endTime;\n    ({ data, status, endTime } = this._prepTraining(data, options));\n\n    return new Promise((resolve, reject) => {\n      try {\n        const thawedTrain = new Thaw(new Array(this.trainOpts.iterations), {\n          delay: true,\n          each: () => this._trainingTick(data, status, endTime) || thawedTrain.stop(),\n          done: () => resolve(status)\n        });\n        thawedTrain.tick();\n      } catch (trainError) {\n        reject({trainError, status});\n      }\n    });\n  }\n\n  /**\n   *\n   * @param input\n   * @param target\n   */\n  _trainPattern(input, target, logErrorRate) {\n\n    // forward propagate\n    this.runInput(input);\n\n    // back propagate\n    this.calculateDeltas(target);\n    this._adjustWeights();\n\n    if  (logErrorRate) {\n      return mse(this.errors[this.outputLayer]);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   *\n   * @param target\n   */\n  _calculateDeltasSigmoid(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = error * output * (1 - output);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param target\n   */\n  _calculateDeltasRelu(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = output > 0 ? error : 0;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param target\n   */\n  _calculateDeltasLeakyRelu(target) {\n    let alpha = this.leakyReluAlpha;\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = output > 0 ? error : alpha * error;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param target\n   */\n  _calculateDeltasTanh(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = (1 - output * output) * error;\n      }\n    }\n  }\n\n  /**\n   *\n   * Changes weights of networks\n   */\n  _adjustWeights() {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      let incoming = this.outputs[layer - 1];\n\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let delta = this.deltas[layer][node];\n\n        for (let k = 0; k < incoming.length; k++) {\n          let change = this.changes[layer][node][k];\n\n          change = (this.trainOpts.learningRate * delta * incoming[k])\n            + (this.trainOpts.momentum * change);\n\n          this.changes[layer][node][k] = change;\n          this.weights[layer][node][k] += change;\n        }\n        this.biases[layer][node] += this.trainOpts.learningRate * delta;\n      }\n    }\n  }\n\n  _setupAdam() {\n    this.biasChangesLow = [];\n    this.biasChangesHigh = [];\n    this.changesLow = [];\n    this.changesHigh = [];\n    this.iterations = 0;\n\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\n      let size = this.sizes[layer];\n      if (layer > 0) {\n        this.biasChangesLow[layer] = zeros(size);\n        this.biasChangesHigh[layer] = zeros(size);\n        this.changesLow[layer] = new Array(size);\n        this.changesHigh[layer] = new Array(size);\n\n        for (let node = 0; node < size; node++) {\n          let prevSize = this.sizes[layer - 1];\n          this.changesLow[layer][node] = zeros(prevSize);\n          this.changesHigh[layer][node] = zeros(prevSize);\n        }\n      }\n    }\n\n    this._adjustWeights = this._adjustWeightsAdam;\n  }\n\n  _adjustWeightsAdam() {\n    const trainOpts = this.trainOpts;\n    this.iterations++;\n\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      const incoming = this.outputs[layer - 1];\n\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        const delta = this.deltas[layer][node];\n\n        for (let k = 0; k < incoming.length; k++) {\n          const gradient = delta * incoming[k];\n          const changeLow = this.changesLow[layer][node][k] * trainOpts.beta1 + (1 - trainOpts.beta1) * gradient;\n          const changeHigh = this.changesHigh[layer][node][k] * trainOpts.beta2 + (1 - trainOpts.beta2) * gradient * gradient;\n          \n          const momentumCorrection = changeLow / (1 - Math.pow(trainOpts.beta1, this.iterations));\n          const gradientCorrection = changeHigh / (1 - Math.pow(trainOpts.beta2, this.iterations));\n\n          this.changesLow[layer][node][k] = changeLow;\n          this.changesHigh[layer][node][k] = changeHigh;\n          this.weights[layer][node][k] += this.trainOpts.learningRate * momentumCorrection / (Math.sqrt(gradientCorrection) + trainOpts.epsilon);\n        }\n\n        const biasGradient = this.deltas[layer][node];\n        const biasChangeLow = this.biasChangesLow[layer][node] * trainOpts.beta1 + (1 - trainOpts.beta1) * biasGradient;\n        const biasChangeHigh = this.biasChangesHigh[layer][node] * trainOpts.beta2 + (1 - trainOpts.beta2) * biasGradient * biasGradient;\n\n        const biasMomentumCorrection = this.biasChangesLow[layer][node] / (1 - Math.pow(trainOpts.beta1, this.iterations));\n        const biasGradientCorrection = this.biasChangesHigh[layer][node] / (1 - Math.pow(trainOpts.beta2, this.iterations));\n\n        this.biasChangesLow[layer][node] = biasChangeLow;\n        this.biasChangesHigh[layer][node] = biasChangeHigh;\n        this.biases[layer][node] += trainOpts.learningRate * biasMomentumCorrection / (Math.sqrt(biasGradientCorrection) + trainOpts.epsilon);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {*}\n   */\n  _formatData(data) {\n    if (!Array.isArray(data)) { // turn stream datum into array\n      let tmp = [];\n      tmp.push(data);\n      data = tmp;\n    }\n    // turn sparse hash input into arrays with 0s as filler\n    let datum = data[0].input;\n    if (!Array.isArray(datum) && !(datum instanceof Float32Array)) {\n      if (!this.inputLookup) {\n        this.inputLookup = lookup.buildLookup(data.map(value => value['input']));\n      }\n      data = data.map(datum => {\n        let array = lookup.toArray(this.inputLookup, datum.input);\n        return Object.assign({}, datum, { input: array });\n      }, this);\n    }\n\n    if (!Array.isArray(data[0].output)) {\n      if (!this.outputLookup) {\n        this.outputLookup = lookup.buildLookup(data.map(value => value['output']));\n      }\n      data = data.map(datum => {\n        let array = lookup.toArray(this.outputLookup, datum.output);\n        return Object.assign({}, datum, { output: array });\n      }, this);\n    }\n    return data;\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {\n   *  {\n   *    error: number,\n   *    misclasses: Array\n   *  }\n   * }\n   */\n  test(data) {\n    data = this._formatData(data);\n\n    // for binary classification problems with one output node\n    let isBinary = data[0].output.length === 1;\n    let falsePos = 0;\n    let falseNeg = 0;\n    let truePos = 0;\n    let trueNeg = 0;\n\n    // for classification problems\n    let misclasses = [];\n\n    // run each pattern through the trained network and collect\n    // error and misclassification statistics\n    let sum = 0;\n    for (let i = 0; i < data.length; i++) {\n      let output = this.runInput(data[i].input);\n      let target = data[i].output;\n\n      let actual, expected;\n      if (isBinary) {\n        actual = output[0] > this.binaryThresh ? 1 : 0;\n        expected = target[0];\n      }\n      else {\n        actual = output.indexOf(max(output));\n        expected = target.indexOf(max(target));\n      }\n\n      if (actual !== expected) {\n        let misclass = data[i];\n        Object.assign(misclass, {\n          actual: actual,\n          expected: expected\n        });\n        misclasses.push(misclass);\n      }\n\n      if (isBinary) {\n        if (actual === 0 && expected === 0) {\n          trueNeg++;\n        } else if (actual === 1 && expected === 1) {\n          truePos++;\n        } else if (actual === 0 && expected === 1) {\n          falseNeg++;\n        } else if (actual === 1 && expected === 0) {\n          falsePos++;\n        }\n      }\n\n      let errors = output.map((value, i) => {\n        return target[i] - value;\n      });\n      sum += mse(errors);\n    }\n    let error = sum / data.length;\n\n    let stats = {\n      error: error,\n      misclasses: misclasses\n    };\n\n    if (isBinary) {\n      Object.assign(stats, {\n        trueNeg: trueNeg,\n        truePos: truePos,\n        falseNeg: falseNeg,\n        falsePos: falsePos,\n        total: data.length,\n        precision: truePos > 0 ? truePos / (truePos + falsePos) : 0,\n        recall: truePos > 0 ? truePos / (truePos + falseNeg) : 0,\n        accuracy: (trueNeg + truePos) / data.length\n      });\n    }\n    return stats;\n  }\n\n  /**\n   *\n   * @returns\n   *  {\n   *    layers: [\n   *      {\n   *        x: {},\n   *        y: {}\n   *      },\n   *      {\n   *        '0': {\n   *          bias: -0.98771313,\n   *          weights: {\n   *            x: 0.8374838,\n   *            y: 1.245858\n   *          },\n   *        '1': {\n   *          bias: 3.48192004,\n   *          weights: {\n   *            x: 1.7825821,\n   *            y: -2.67899\n   *          }\n   *        }\n   *      },\n   *      {\n   *        f: {\n   *          bias: 0.27205739,\n   *          weights: {\n   *            '0': 1.3161821,\n   *            '1': 2.00436\n   *          }\n   *        }\n   *      }\n   *    ]\n   *  }\n   */\n  toJSON() {\n    let layers = [];\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\n      layers[layer] = {};\n\n      let nodes;\n      // turn any internal arrays back into hashes for readable json\n      if (layer === 0 && this.inputLookup) {\n        nodes = Object.keys(this.inputLookup);\n      }\n      else if (layer === this.outputLayer && this.outputLookup) {\n        nodes = Object.keys(this.outputLookup);\n      }\n      else {\n        nodes = range(0, this.sizes[layer]);\n      }\n\n      for (let j = 0; j < nodes.length; j++) {\n        let node = nodes[j];\n        layers[layer][node] = {};\n\n        if (layer > 0) {\n          layers[layer][node].bias = this.biases[layer][j];\n          layers[layer][node].weights = {};\n          for (let k in layers[layer - 1]) {\n            let index = k;\n            if (layer === 1 && this.inputLookup) {\n              index = this.inputLookup[k];\n            }\n            layers[layer][node].weights[k] = this.weights[layer][j][index];\n          }\n        }\n      }\n    }\n    return {\n      sizes: this.sizes,\n      layers,\n      outputLookup:!!this.outputLookup,\n      inputLookup:!!this.inputLookup,\n      activation: this.activation,\n      trainOpts: this._getTrainOptsJSON()\n    };\n  }\n\n  /**\n   *\n   * @param json\n   * @returns {NeuralNetwork}\n   */\n  fromJSON(json) {\n    this.sizes = json.sizes;\n    this._initialize();\n\n    for (let i = 0; i <= this.outputLayer; i++) {\n      let layer = json.layers[i];\n      if (i === 0 && (!layer[0] || json.inputLookup)) {\n        this.inputLookup = lookup.lookupFromHash(layer);\n      }\n      else if (i === this.outputLayer && (!layer[0] || json.outputLookup)) {\n        this.outputLookup = lookup.lookupFromHash(layer);\n      }\n      if (i > 0) {\n        const nodes = Object.keys(layer);\n        this.sizes[i] = nodes.length;\n        for (let j in nodes) {\n          const node = nodes[j];\n          this.biases[i][j] = layer[node].bias;\n          this.weights[i][j] = toArray(layer[node].weights);\n        }\n      }\n    }\n    if (json.hasOwnProperty('trainOpts')) {\n      this._updateTrainingOptions(json.trainOpts);\n    }\n    this.setActivation(this.activation || 'sigmoid');\n    return this;\n  }\n\n  /**\n   *\n   * @returns {Function}\n   */\n  toFunction() {\n    const activation = this.activation;\n    const leakyReluAlpha = this.leakyReluAlpha;\n    let needsVar = false;\n    function nodeHandle(layers, layerNumber, nodeKey) {\n      if (layerNumber === 0) {\n        return (typeof nodeKey === 'string'\n          ? `input['${nodeKey}']`\n          : `input[${nodeKey}]`);\n      }\n\n      const layer = layers[layerNumber];\n      const node = layer[nodeKey];\n      let result = ['(' , node.bias];\n      for (let w in node.weights) {\n        if (node.weights[w] < 0) {\n          result.push(`${node.weights[w]}*${nodeHandle(layers, layerNumber - 1, w)}`);\n        } else {\n          result.push(`+${node.weights[w]}*${nodeHandle(layers, layerNumber - 1, w)}`);\n        }\n      }\n      result.push(')');\n\n      switch (activation) {\n        case 'sigmoid':\n          return `1/(1+1/Math.exp(${result.join('')}))`;\n        case 'relu': {\n          needsVar = true;\n          return `((v=${result.join('')})<0?0:v)`;\n        }\n        case 'leaky-relu': {\n          needsVar = true;\n          return `((v=${result.join('')})<0?0:${leakyReluAlpha}*v)`;\n        }\n        case 'tanh':\n          return `Math.tanh(${result.join('')})`;\n        default:\n          throw new Error('unknown activation type ' + activation);\n      }\n    }\n\n    const layers = this.toJSON().layers;\n    const layersAsMath = [];\n    let result;\n    for (let i in layers[layers.length - 1]) {\n      layersAsMath.push(nodeHandle(layers, layers.length - 1, i));\n    }\n    if (this.outputLookup) {\n      result = `{${\n        Object.keys(this.outputLookup)\n          .map((key, i) => `'${key}':${layersAsMath[i]}`)\n        }}`;\n    } else {\n      result = `[${layersAsMath.join(',')}]`;\n    }\n\n    return new Function('input', `${ needsVar ? 'var v;' : '' }return ${result};`);\n  }\n}\n"]}